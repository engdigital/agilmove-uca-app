#!/usr/bin/env node

/**
 * Verifica√ß√£o Autom√°tica Refinada para Stores - AgilMove UCA
 * Verifica especificamente os itens obrigat√≥rios para publica√ß√£o nas stores
 */

const fs = require('fs')
const path = require('path')

console.log('üè™ Verifica√ß√£o Autom√°tica para Stores - AgilMove UCA\n')

class StoreReadinessChecker {
  constructor() {
    this.results = {
      timestamp: new Date(),
      items: {},
      score: 0,
      maxScore: 0,
      readyForStores: false,
      criticalIssues: [],
      improvements: []
    }
  }

  checkManifestPWA() {
    console.log('üì± Verificando Manifest.json otimizado para PWA...')
    
    const manifestPath = path.join(process.cwd(), 'public', 'manifest.json')
    let score = 0
    const maxScore = 20
    const issues = []
    
    if (!fs.existsSync(manifestPath)) {
      issues.push('Arquivo manifest.json n√£o encontrado')
      this.results.criticalIssues.push('Manifest.json ausente')
    } else {
      try {
        const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'))
        
        // Verifica√ß√µes obrigat√≥rias
        if (manifest.name) score += 3
        else issues.push('Campo "name" ausente')
        
        if (manifest.short_name) score += 2
        else issues.push('Campo "short_name" ausente')
        
        if (manifest.icons && manifest.icons.length >= 2) score += 5
        else issues.push('√çcones insuficientes (m√≠nimo 2)')
        
        if (manifest.start_url) score += 2
        else issues.push('Campo "start_url" ausente')
        
        if (manifest.display === 'standalone' || manifest.display === 'fullscreen') score += 3
        else issues.push('Display mode n√£o otimizado para PWA')
        
        if (manifest.theme_color) score += 2
        else issues.push('Campo "theme_color" ausente')
        
        if (manifest.background_color) score += 2
        else issues.push('Campo "background_color" ausente')
        
        if (manifest.screenshots && manifest.screenshots.length > 0) score += 1
        else this.results.improvements.push('Adicionar screenshots para app stores')
        
        console.log(`   ‚úÖ Manifest: ${score}/${maxScore} pontos`)
        if (issues.length > 0) {
          console.log('   ‚ö†Ô∏è  Problemas encontrados:')
          issues.forEach(issue => console.log(`      - ${issue}`))
        }
        
      } catch (error) {
        issues.push(`Erro ao ler manifest.json: ${error.message}`)
        this.results.criticalIssues.push('Manifest.json inv√°lido')
      }
    }
    
    this.results.items.manifest = {
      score,
      maxScore,
      issues,
      status: score >= maxScore * 0.8 ? 'pass' : 'fail'
    }
    this.results.score += score
    this.results.maxScore += maxScore
  }

  checkIcons() {
    console.log('üé® Verificando √≠cones em todas as resolu√ß√µes...')
    
    const requiredSizes = [72, 96, 128, 144, 152, 192, 384, 512]
    const publicPath = path.join(process.cwd(), 'public')
    
    let score = 0
    const maxScore = 16 // 2 pontos por √≠cone
    const issues = []
    const foundIcons = []
    
    requiredSizes.forEach(size => {
      const iconPath = path.join(publicPath, `icon-${size}x${size}.png`)
      if (fs.existsSync(iconPath)) {
        score += 2
        foundIcons.push(size)
      } else {
        issues.push(`√çcone ${size}x${size} n√£o encontrado`)
      }
    })
    
    // Verificar √≠cones adicionais importantes
    const additionalIcons = ['favicon.png', 'apple-touch-icon.png']
    additionalIcons.forEach(icon => {
      const iconPath = path.join(publicPath, icon)
      if (fs.existsSync(iconPath)) {
        foundIcons.push(icon)
      } else {
        this.results.improvements.push(`Adicionar ${icon}`)
      }
    })
    
    console.log(`   ‚úÖ √çcones: ${foundIcons.length}/${requiredSizes.length + additionalIcons.length} encontrados`)
    console.log(`   üìä Score: ${score}/${maxScore} pontos`)
    
    if (issues.length > 0) {
      console.log('   ‚ö†Ô∏è  √çcones faltando:')
      issues.forEach(issue => console.log(`      - ${issue}`))
      
      if (issues.length > 2) {
        this.results.criticalIssues.push('Muitos √≠cones em falta')
      }
    }
    
    this.results.items.icons = {
      score,
      maxScore,
      issues,
      foundIcons,
      status: score >= maxScore * 0.75 ? 'pass' : 'fail'
    }
    this.results.score += score
    this.results.maxScore += maxScore
  }

  checkServiceWorker() {
    console.log('‚öôÔ∏è Verificando Service Worker com cache inteligente...')
    
    const swPath = path.join(process.cwd(), 'public', 'service-worker.js')
    let score = 0
    const maxScore = 15
    const issues = []
    
    if (!fs.existsSync(swPath)) {
      issues.push('Service Worker n√£o encontrado')
      this.results.criticalIssues.push('Service Worker ausente')
    } else {
      try {
        const swContent = fs.readFileSync(swPath, 'utf8')
        
        // Verificar funcionalidades obrigat√≥rias
        if (swContent.includes('install')) score += 3
        else issues.push('Event listener "install" n√£o encontrado')
        
        if (swContent.includes('activate')) score += 3
        else issues.push('Event listener "activate" n√£o encontrado')
        
        if (swContent.includes('fetch')) score += 3
        else issues.push('Event listener "fetch" n√£o encontrado')
        
        if (swContent.includes('caches.open')) score += 2
        else issues.push('Cache API n√£o implementada')
        
        if (swContent.includes('push') || swContent.includes('notification')) score += 2
        else this.results.improvements.push('Implementar suporte a notifica√ß√µes push')
        
        if (swContent.includes('Cache First') || swContent.includes('Network First')) score += 2
        else issues.push('Estrat√©gias de cache n√£o implementadas')
        
        console.log(`   ‚úÖ Service Worker: ${score}/${maxScore} pontos`)
        if (issues.length > 0) {
          console.log('   ‚ö†Ô∏è  Funcionalidades faltando:')
          issues.forEach(issue => console.log(`      - ${issue}`))
        }
        
      } catch (error) {
        issues.push(`Erro ao ler Service Worker: ${error.message}`)
        this.results.criticalIssues.push('Service Worker inv√°lido')
      }
    }
    
    this.results.items.serviceWorker = {
      score,
      maxScore,
      issues,
      status: score >= maxScore * 0.8 ? 'pass' : 'fail'
    }
    this.results.score += score
    this.results.maxScore += maxScore
  }

  checkOfflinePage() {
    console.log('üìÑ Verificando p√°gina offline personalizada...')
    
    const offlinePath = path.join(process.cwd(), 'public', 'offline.html')
    let score = 0
    const maxScore = 10
    const issues = []
    
    if (!fs.existsSync(offlinePath)) {
      issues.push('P√°gina offline n√£o encontrada')
      this.results.criticalIssues.push('P√°gina offline ausente')
    } else {
      try {
        const offlineContent = fs.readFileSync(offlinePath, 'utf8')
        
        if (offlineContent.includes('<html')) score += 3
        else issues.push('HTML inv√°lido')
        
        if (offlineContent.includes('offline') || offlineContent.includes('sem internet')) score += 3
        else issues.push('Conte√∫do n√£o indica estado offline')
        
        if (offlineContent.includes('style') || offlineContent.includes('css')) score += 2
        else this.results.improvements.push('Adicionar estiliza√ß√£o √† p√°gina offline')
        
        if (offlineContent.includes('reconnect') || offlineContent.includes('tentar novamente')) score += 2
        else this.results.improvements.push('Adicionar bot√£o de reconex√£o')
        
        console.log(`   ‚úÖ P√°gina Offline: ${score}/${maxScore} pontos`)
        
      } catch (error) {
        issues.push(`Erro ao ler p√°gina offline: ${error.message}`)
        this.results.criticalIssues.push('P√°gina offline inv√°lida')
      }
    }
    
    this.results.items.offlinePage = {
      score,
      maxScore,
      issues,
      status: score >= maxScore * 0.7 ? 'pass' : 'fail'
    }
    this.results.score += score
    this.results.maxScore += maxScore
  }

  checkSecurityHeaders() {
    console.log('üîí Verificando headers de seguran√ßa obrigat√≥rios...')
    
    const nextConfigPath = path.join(process.cwd(), 'next.config.mjs')
    let score = 0
    const maxScore = 20
    const issues = []
    const foundHeaders = []
    
    if (!fs.existsSync(nextConfigPath)) {
      issues.push('next.config.mjs n√£o encontrado')
      this.results.criticalIssues.push('Configura√ß√£o Next.js ausente')
    } else {
      try {
        const configContent = fs.readFileSync(nextConfigPath, 'utf8')
        
        const requiredHeaders = [
          'Content-Security-Policy',
          'X-Content-Type-Options',
          'X-Frame-Options',
          'Strict-Transport-Security',
          'Referrer-Policy'
        ]
        
        requiredHeaders.forEach(header => {
          if (configContent.includes(header)) {
            score += 4
            foundHeaders.push(header)
          } else {
            issues.push(`Header ${header} n√£o configurado`)
          }
        })
        
        console.log(`   ‚úÖ Headers: ${foundHeaders.length}/${requiredHeaders.length} configurados`)
        console.log(`   üìä Score: ${score}/${maxScore} pontos`)
        
        if (issues.length > 0) {
          console.log('   ‚ö†Ô∏è  Headers faltando:')
          issues.forEach(issue => console.log(`      - ${issue}`))
          
          if (issues.length >= 3) {
            this.results.criticalIssues.push('Muitos headers de seguran√ßa em falta')
          }
        }
        
      } catch (error) {
        issues.push(`Erro ao ler configura√ß√£o: ${error.message}`)
        this.results.criticalIssues.push('Configura√ß√£o Next.js inv√°lida')
      }
    }
    
    this.results.items.securityHeaders = {
      score,
      maxScore,
      issues,
      foundHeaders,
      status: score >= maxScore * 0.8 ? 'pass' : 'fail'
    }
    this.results.score += score
    this.results.maxScore += maxScore
  }

  checkPrivacyPolicy() {
    console.log('üìã Verificando pol√≠tica de privacidade estruturada...')
    
    const privacyPath = path.join(process.cwd(), 'app', 'privacy-policy', 'page.tsx')
    let score = 0
    const maxScore = 15
    const issues = []
    
    if (!fs.existsSync(privacyPath)) {
      issues.push('P√°gina de pol√≠tica de privacidade n√£o encontrada')
      this.results.criticalIssues.push('Pol√≠tica de privacidade ausente')
    } else {
      try {
        const privacyContent = fs.readFileSync(privacyPath, 'utf8')
        
        if (privacyContent.includes('privacy') || privacyContent.includes('privacidade')) score += 5
        else issues.push('Conte√∫do n√£o indica pol√≠tica de privacidade')
        
        if (privacyContent.includes('dados') || privacyContent.includes('data')) score += 3
        else issues.push('N√£o menciona tratamento de dados')
        
        if (privacyContent.includes('cookie') || privacyContent.includes('storage')) score += 3
        else this.results.improvements.push('Mencionar uso de cookies/storage')
        
        if (privacyContent.includes('contato') || privacyContent.includes('contact')) score += 2
        else this.results.improvements.push('Adicionar informa√ß√µes de contato')
        
        if (privacyContent.includes('atualiza') || privacyContent.includes('modifica')) score += 2
        else this.results.improvements.push('Mencionar pol√≠tica de atualiza√ß√µes')
        
        console.log(`   ‚úÖ Pol√≠tica de Privacidade: ${score}/${maxScore} pontos`)
        
      } catch (error) {
        issues.push(`Erro ao ler pol√≠tica: ${error.message}`)
        this.results.criticalIssues.push('Pol√≠tica de privacidade inv√°lida')
      }
    }
    
    this.results.items.privacyPolicy = {
      score,
      maxScore,
      issues,
      status: score >= maxScore * 0.7 ? 'pass' : 'fail'
    }
    this.results.score += score
    this.results.maxScore += maxScore
  }

  generateFinalReport() {
    const percentage = Math.round((this.results.score / this.results.maxScore) * 100)
    this.results.readyForStores = percentage >= 85 && this.results.criticalIssues.length === 0
    
    console.log('\nüìä RELAT√ìRIO FINAL:')
    console.log('='.repeat(60))
    
    console.log(`\nüéØ Pontua√ß√£o Total: ${this.results.score}/${this.results.maxScore} (${percentage}%)`)
    
    let statusIcon = 'üî¥'
    let statusText = 'N√ÉO PRONTO'
    
    if (percentage >= 90) {
      statusIcon = 'üü¢'
      statusText = 'EXCELENTE'
    } else if (percentage >= 80) {
      statusIcon = 'üü°'
      statusText = 'BOM'
    } else if (percentage >= 70) {
      statusIcon = 'üü†'
      statusText = 'REGULAR'
    }
    
    console.log(`${statusIcon} Status para Stores: ${statusText}`)
    console.log(`üè™ Pronto para publica√ß√£o: ${this.results.readyForStores ? '‚úÖ SIM' : '‚ùå N√ÉO'}`)
    
    // Detalhamento por item
    console.log('\nüìã Detalhamento por Item:')
    Object.entries(this.results.items).forEach(([key, item]) => {
      const statusIcon = item.status === 'pass' ? '‚úÖ' : '‚ùå'
      const percentage = Math.round((item.score / item.maxScore) * 100)
      console.log(`   ${statusIcon} ${key}: ${item.score}/${item.maxScore} (${percentage}%)`)
    })
    
    // Issues cr√≠ticos
    if (this.results.criticalIssues.length > 0) {
      console.log('\nüö® ISSUES CR√çTICOS (IMPEDEM PUBLICA√á√ÉO):')
      this.results.criticalIssues.forEach(issue => {
        console.log(`   ‚ùå ${issue}`)
      })
    }
    
    // Melhorias sugeridas
    if (this.results.improvements.length > 0) {
      console.log('\nüí° MELHORIAS SUGERIDAS:')
      this.results.improvements.forEach(improvement => {
        console.log(`   üí° ${improvement}`)
      })
    }
    
    // Pr√≥ximos passos
    console.log('\nüöÄ PR√ìXIMOS PASSOS:')
    if (this.results.readyForStores) {
      console.log('   üéâ Parab√©ns! Seu app est√° pronto para as stores!')
      console.log('   üì± Execute: npm run store:prepare')
      console.log('   üîß Execute: npm run build')
    } else {
      console.log('   üîß Corrigir issues cr√≠ticos listados acima')
      console.log('   üîÑ Executar novamente: npm run store:autocheck')
      console.log('   üìñ Consultar documenta√ß√£o de prepara√ß√£o para stores')
    }
  }

  saveReport() {
    const reportPath = path.join(process.cwd(), 'store-readiness-autocheck-report.json')
    try {
      fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2))
      console.log(`\nüìÑ Relat√≥rio detalhado salvo em: store-readiness-autocheck-report.json`)
    } catch (error) {
      console.error(`‚ùå Erro ao salvar relat√≥rio: ${error.message}`)
    }
  }

  async run() {
    console.log('üîÑ Iniciando verifica√ß√£o autom√°tica...\n')
    
    this.checkManifestPWA()
    this.checkIcons()
    this.checkServiceWorker()
    this.checkOfflinePage()
    this.checkSecurityHeaders()
    this.checkPrivacyPolicy()
    
    this.generateFinalReport()
    this.saveReport()
    
    return this.results.readyForStores
  }
}

// Executar verifica√ß√£o
const checker = new StoreReadinessChecker()
checker.run()
  .then(ready => {
    console.log(`\n‚úÖ Verifica√ß√£o conclu√≠da - App ${ready ? 'PRONTO' : 'N√ÉO PRONTO'} para stores`)
    process.exit(ready ? 0 : 1)
  })
  .catch(error => {
    console.error('‚ùå Erro na verifica√ß√£o:', error)
    process.exit(1)
  })
